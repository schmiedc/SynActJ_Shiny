runApp('/data1/FMP_Docs/Repositories/plugins_FMP/pHluorinShiny')
runApp('/data1/FMP_Docs/Repositories/plugins_FMP/pHluorinShiny')
runApp('/data1/FMP_Docs/Repositories/plugins_FMP/pHluorinShiny')
shiny::runApp('/data1/FMP_Docs/Repositories/plugins_FMP/pHluorinShiny')
read.csv("/home/schmiedc/Desktop/downloads.csv")
plot <- read.csv("/home/schmiedc/Desktop/downloads.csv")
plot <- read.csv("/home/schmiedc/Desktop/downloads.csv", header = FALSE)
head(plot)
ggplot(plot, aes(x=V1, y=V2)) +
geom_line() +
guides(colour=FALSE)  +
xlab("Time (Months)") +
ylab("Number of unique IP addresses") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
library("ggplot")
plot <- read.csv("/home/schmiedc/Desktop/downloads.csv", header = FALSE)
head(plot)
ggplot(plot, aes(x=V1, y=V2)) +
geom_line() +
guides(colour=FALSE)  +
xlab("Time (Months)") +
ylab("Number of unique IP addresses") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
library("ggplot2")
plot <- read.csv("/home/schmiedc/Desktop/downloads.csv", header = FALSE)
head(plot)
ggplot(plot, aes(x=V1, y=V2)) +
geom_line() +
guides(colour=FALSE)  +
xlab("Time (Months)") +
ylab("Number of unique IP addresses") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(plot, aes(x=V1, y=V2)) +
geom_line() +
xlab("Time (Months)") +
ylab("Number of unique IP addresses") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(plot, aes(x=V1, y=V2)) +
geom_line(group = 1) +
xlab("Month") +
ylab("Number of unique IP addresses") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(plot, aes(x=V1, y=V2)) +
geom_line(group = 1) +
xlab("Month") +
ylab("Update site usage") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(plot, aes(x=V1, y=V2)) +
geom_line(group = 1) +
xlab("Month") +
ylab("Number of unique users") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(plot, aes(x=V1, y=V2)) +
geom_line(group = 1) +
xlab("Month") +
ylab("Number of unique users") +
ggtitle("CSBDeep update site usage") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
setwd("/data1/FMP_Docs/Repositories/plugins_FMP/pHluorinShiny/")
library(gridExtra)
source("dataProcessing.R")
source("saveData.R")
source("plotData.R")
source("fitting.R")
#               gridExtra: install.packages("gridExtra")
#               tidyverse: install.packages("tidyverse")
#               broom: install.packages("broom")
#
#      VERSION: 1.0.0
#      CREATED: 2018-05-24
#     REVISION: 2020-02-07
#
# ============================================================================
# where to get the files
indir = "/data1/FMP_Docs/Projects/Publication_SynapseJ/pHluorinJ_Data/RevisedAnalysis/"
# where to save the data
outdir = indir
# ============================================================================
resultname = "Test"
# Time resolution in seconds
timeResolution = 2
# when stimulation happens
# these frames are used for calcuating the mean intensity
# then this value is used for the surface normalization
frameStimulation = 5
# further settings
labelSignal = "Spot"
labelBackground = "background"
# ------------------------------------------------------------------------------
outputDirectory = "/data1/FMP_Docs/Projects/Publication_SynapseJ/pHluorinJ_Data/checkFilter/"
sd_multiplicator = 2
peak_filter = 26
# ==============================================================================
# get raw data
table.signal <- read_csv(paste0(indir,"_RawSignal.csv"))
table.background <- read_csv(paste0(indir,"_RawBackground.csv"))
# extracting experimental information from file name
table.signal <- table.signal %>% separate(name,
sep ="_", c("day", "treatment", "number"),
remove=FALSE)
table.background <- table.background %>% separate(name,
sep ="_", c("day", "treatment", "number"),
remove=FALSE)
# ==============================================================================
# computes standard deviation of background overall all traces
table.background_sd <- subset(table.background, variable == "mean")
table.background_sd <- table.background_sd %>% group_by(name, day, treatment, number, roi) %>% summarize(sd = sd(value))
table.background_sd$sd_mult <- table.background_sd$sd * sd_multiplicator
# ==============================================================================
table.signal_mean_filter <- subset(table.signal, variable == "mean")
raw_signal_sd <- plotRawMean(table.signal_mean_filter)
raw_signal_grids_sd <-  marrangeGrob(raw_signal_sd, ncol = 3, nrow = 4, top = "Raw grey values of filtered traces")
raw_signal_unfiltered <- plotRawMean(table.signal_mean_filter)
raw_signal_grids_unfiltered <-  marrangeGrob(raw_signal_unfiltered, ncol = 3, nrow = 4, top = "Raw grey values of filtered traces")
ggsave(plot = raw_signal_grids_unfiltered,
file=file.path(outputDirectory, paste0(resultname, "_unfiltered", sd_multiplicator, ".pdf") ),
width = 297,
height = 210,
units = "mm")
